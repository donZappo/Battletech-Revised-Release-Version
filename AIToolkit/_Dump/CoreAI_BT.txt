core_AI_root (SelectorNode) [||]
  startup_cleanup (InverterNode) <- successDecorator0000 <- sequence0000 [&&]
    clearSensorLock0000
    clearActiveProbeHasTargets0000
  if_shutdown__restart (SequenceNode) [&&]
    isShutdown0000
    mechStartUp0000
  if_prone__stand_up (SequenceNode) [&&]
    movementAvailable0000 (IsMovementAvailableForUnitNode)
    isProne0000
    stand0000
  if_inspire_available__maybe_inspire (SequenceNode) [&&]
    inspireAvailable0000
    successDecorator0001 <- sequence0001 [&&]
      movementAvailable0001 (IsMovementAvailableForUnitNode)
      blockUntilPathfindingReady0000
    evaluateInspirationValue0000
    claimInspiration0000
  get_inside_encounter_bounds (SequenceNode) [&&]
    movementAvailable0002 (IsMovementAvailableForUnitNode)
    inverter0000 <- isInsideEncounterBounds0000
    blockUntilPathfindingReady0001
    moveInsideEncounterBounds0000
  comply_with_stay_inside_region_order (SequenceNode) [&&]
    movementAvailable0003 (IsMovementAvailableForUnitNode)
    hasStayInsideRegion0000
    inverter0001 <- isInsideStayInsideRegion0000
    blockUntilPathfindingReady0002
    moveToStayInsideRegion0000
  pre_attack_move (SequenceNode) [&&]
    movementAvailable0004 (IsMovementAvailableForUnitNode)
    blockUntilPathfindingReady0003
    selector0000 [||]
      pre_attack_lance_move (SequenceNode) [&&]
        hasPreAttackLanceMove0000 (LanceHasPreAttackDestinationNode)
        moveLanceToPreAttackDestination0000
      pre_attack_unit_move (SequenceNode) [&&]
        hasPreAttackUnitMove0000 (UnitHasPreAttackDestinationNode)
        moveUnitToPreAttackDestination0000
  free_engage (SequenceNode) [&&]
    lanceDetectsEnemies0000
    findDetectedEnemies0000
    isAlerted0000
    selector0001 [||]
      canMove (SequenceNode) [&&]
        movementAvailable0005 (IsMovementAvailableForUnitNode)
        blockUntilPathfindingReady0004
        reset_active_probe (SuccessDecoratorNode) <- clearActiveProbe (SequenceNode) [&&]
          hasActiveProbeAbility0000
          clearActiveProbeHasTargets0001
        maybe_sensor_lock (SuccessDecoratorNode) <- evalSensorLock (SequenceNode) [&&]
          clearSensorLock0001
          hasSensorLockAbility0000
          hasSensorLockTarget0000
          sortEnemiesBySensorLockQuality0000
          recordHighestPriorityEnemyAsSensorLockTarget0000
        offense___defense (SelectorNode) [||]
          if_overheated__maybe_brace (SequenceNode) [&&]
            isOverheated0000
            randomPercentageLessThanBV0000 [Float_BraceWhenOverheatedPercentage]
            inverter0002 <- anyHostileBehindMe0000
            brace0000
          offensive_Move (SequenceNode) [&&]
            inverter0003 <- isBVTrue0000 [Bool_AlwaysDefensiveMood]
            selector0002 [||]
              isBVTrue0001 [Bool_AlwaysOffensiveMood]
              inverter0004 <- hasRangedWeapons0000
              inverter0005 <- sequence0002 [&&]
                randomPercentageLessThanBV0001 [Float_UnsteadyCausesDefensiveMovePercentage]
                isUnsteady0000
            selector0003 [||]
              sequence0003 [&&]
                isBVTrue0002 [Bool_RuthlessPriorityTargeting]
                inverter0006 <- wasTargetedRecently0000
                hasPriorityTarget0000
                setMood0000
              sequence0004 [&&]
                hasRecordedSensorLockTarget0000
                setMood0001
              setMood0002
            selector0004 [||]
              canMoveAndShootWithoutOverheating0000
              canMeleeHostileTargets0000
              canDFAHostileTargets0000
            aggressive_Movement (SuccessDecoratorNode) <- sequence0005 [&&]
              sortEnemiesByThreat0000
              priorityMove (SelectorNode) [||]
                sequence0006 [&&]
                  inverter0007 <- wasTargetedRecently0001
                  hasPriorityTarget0001
                  randomPercentageLessThanBV0002 [Float_PriorityMovePercentage]
                  usePreferredTargetToHitThreshold0000
                  sortEnemiesByPriorityList0000
                maybeFilterOutPriorityTargets0000
                filterKeepingRecentAttackers0000
                succeed0000
              useNormalToHitThreshold0000
              clearMoveCandidates0000
              successDecorator0002 <- sequence0007 [&&]
                setNoLOFToHostilesCache0000
                no_LOF_to_hostiles_in_range (InverterNode) <- selector0005 [||]
                  simple_LOF (SequenceNode) [&&]
                    isBVTrue0003 [Bool_SimpleShortRangeLOF]
                    hasLOFToAnyHostileFromReachableLocations0000
                  not_simple_LOF (SequenceNode) [&&]
                    inverter0008 <- isBVTrue0004 [Bool_SimpleShortRangeLOF]
                    areAnyHostilesInWeaponRange0000
                    hasDirectLOFToAnyHostileFromReachableLocations0000
                setNoLOFToHostilesCache0001
              selector0006 [||]
                move_out_of_nook (SequenceNode) [&&]
                  isUrbanBiome0000
                  isBVTrue0005 [Bool_IsNavigatingNook]
                  setNavigatingNook0000
                  isBVTrue0006 [Bool_NoLOFToHostiles]
                  setNavigatingNook0001
                  generateForcedNormalMoveTowardDistantHostileCandidates0000
                  inverter0009 <- highestMoveCandidateIsStationary0000
                  moveTowardsHighestPriorityMoveCandidate0000
                move_towards_combat (SequenceNode) [&&]
                  isBVTrue0007 [Bool_NoLOFToHostiles]
                  successDecorator0003 <- sequence0008 [&&]
                    inverter0010 <- isInterleaved0000
                    hasRecordedSensorLockTarget0001
                    sensorLockRecordedSensorLockTarget0000
                    clearSensorLock0002
                  selector0007 [||]
                    sprint_towards_combat (SequenceNode) [&&]
                      sprintAvailable0000 (IsSprintAvailableForUnitNode)
                      inverter0011 <- areAnyDetectedHostilesInWeaponRangePlusSprintDistance0000
                      inverter0012 <- hasRecordedSensorLockTarget0002
                      selector0008 [||]
                        sequence0009 [&&]
                          clearMoveCandidates0001
                          generateSprintMoveTowardDistantHostileCandidates0000
                          inverter0013 <- highestMoveCandidateIsStationary0001
                          moveTowardsHighestPriorityMoveCandidate0001
                        sequence0010 [&&]
                          clearMoveCandidates0002
                          generateSprintMoveTowardTeammatesCandidates0000
                          inverter0014 <- highestMoveCandidateIsStationary0002
                          moveTowardsHighestPriorityMoveCandidate0002
                    normal_move_towards_combat (SequenceNode) [&&]
                      selector0009 [||]
                        sequence0011 [&&]
                          clearMoveCandidates0003
                          selector0010 [||]
                            generateNormalMoveTowardDistantHostileCandidates0000
                            sequence0012 [&&]
                              isUrbanBiome0001
                              isInMinWeaponRange0000
                              setNavigatingNook0002
                              generateForcedNormalMoveTowardDistantHostileCandidates0001
                          inverter0015 <- highestMoveCandidateIsStationary0003
                          moveTowardsHighestPriorityMoveCandidate0003
                        sequence0013 [&&]
                          clearMoveCandidates0004
                          generateNormalMoveTowardTeammatesCandidates0000
                          inverter0016 <- highestMoveCandidateIsStationary0004
                          moveTowardsHighestPriorityMoveCandidate0004
                sequence0014 [&&]
                  generateForwardMoveCandidates0000
                  generateReverseMoveCandidates0000
                  successDecorator0004 <- sequence0015 [&&]
                    isBVTrue0008 [Bool_AllowAttack]
                    canMeleeHostileTargets0001
                    generateMeleeMoveCandidates0000
                  successDecorator0005 <- sequence0016 [&&]
                    inverter0017 <- isOverheated0001
                    generateJumpMoveCandidates0000
                  generateStationaryMoveCandidates0000
                  successDecorator0006 <- sequence0017 [&&]
                    sprintAvailable0001 (IsSprintAvailableForUnitNode)
                    inverter0018 <- hasRecordedSensorLockTarget0003
                    generateSprintMoveCandidates0000
                  successDecorator0007 <- sequence0018 [&&]
                    hasRecordedSensorLockTarget0004
                    filterNonSensorLockMoves0000
                  if_priority_targeting__remove_non_LOF_move_candidates (SuccessDecoratorNode) <- sequence0019 [&&]
                    isBVTrue0009 [Bool_RuthlessPriorityTargeting]
                    inverter0019 <- wasTargetedRecently0002
                    hasPriorityTarget0002
                    hasLOFToAnyHostileFromReachableLocations0001
                    filterOutNonLOFMoves0000
                  filterMovesForHeat0000
                  successDecorator0008 <- sequence0020 [&&]
                    hasMoveCandidates0000
                    sortMoveCandidatesByInfMap0000
                  selector0011 [||]
                    reckless_skill (SequenceNode) [&&]
                      hasRecklessSkill0000
                      hasLOSToAnyHostile0000
                      isBVTrue0010 [Bool_AllowAttack]
                      attackAvailable0000 (IsAttackAvailableForUnitNode)
                      randomPercentageLessThanBV0003 [Float_UseRecklessSkillPercentageChance]
                      selector0012 [||]
                        sequence0021 [&&]
                          hasECMGhostState0000 (HasECMGhostedStateNode)
                          selector0013 [||]
                            sequence0022 [&&]
                              hasMinimumStealthPips0000
                              shootAtHighestPriorityEnemy0000
                            sequence0023 [&&]
                              canDoSignificantWhileGhostedDamage0000 (CanDoSignificantDamageWhileGhostedNode)
                              shootAtHighestPriorityEnemy0001
                        sequence0024 [&&]
                          inverter0020 <- hasECMGhostState0001 (HasECMGhostedStateNode)
                          shootAtHighestPriorityEnemy0002
                    bulwark_skill (SequenceNode) [&&]
                      hasBulwarkSkill0000
                      isBVTrue0011 [Bool_AllowAttack]
                      attackAvailable0001 (IsAttackAvailableForUnitNode)
                      isBVTrue0012 [Bool_UseBulwarkActions]
                      closeToIdealRange0000
                      hasDirectLOFToAnyHostile0000
                      isStationaryMoveInBulwarkThreshold0000
                      selector0014 [||]
                        sequence0025 [&&]
                          hasECMGhostState0002 (HasECMGhostedStateNode)
                          selector0015 [||]
                            sequence0026 [&&]
                              hasMinimumStealthPips0001
                              executeStationaryAttack0000
                            sequence0027 [&&]
                              canDoSignificantWhileGhostedDamage0001 (CanDoSignificantDamageWhileGhostedNode)
                              executeStationaryAttack0001
                        sequence0028 [&&]
                          inverter0021 <- hasECMGhostState0003 (HasECMGhostedStateNode)
                          executeStationaryAttack0002
                    stationary__e_g__dfa__melee__attack (SequenceNode) [&&]
                      isBVTrue0013 [Bool_AllowAttack]
                      attackAvailable0002 (IsAttackAvailableForUnitNode)
                      highestMoveCandidateIsStationary0005
                      selector0016 [||]
                        sequence0029 [&&]
                          hasECMGhostState0004 (HasECMGhostedStateNode)
                          selector0017 [||]
                            sequence0030 [&&]
                              hasMinimumStealthPips0002
                              executeStationaryAttack0003
                            sequence0031 [&&]
                              canDoSignificantWhileGhostedDamage0002 (CanDoSignificantDamageWhileGhostedNode)
                              executeStationaryAttack0004
                        sequence0032 [&&]
                          inverter0022 <- hasECMGhostState0005 (HasECMGhostedStateNode)
                          executeStationaryAttack0005
                    brace_if_no_moves (SequenceNode) [&&]
                      inverter0023 <- hasMoveCandidates0001
                      brace0001
                    moveTowardsHighestPriorityMoveCandidate0005
          defensive_Move (SequenceNode) [&&]
            debugLog0000
            inverter0024 <- isBVTrue0014 [Bool_AlwaysOffensiveMood]
            setMood0003
            selector0018 [||]
              brace_if_at_acceptable_range_to_cool_down (SequenceNode) [&&]
                isOverheated0002
                isOutsideCoolDownRange0000
                inverter0025 <- hasLOSToAnyHostile0001
                inverter0026 <- anyHostileBehindMe0001
                brace0002
              move_to_defensive_position (SequenceNode) [&&]
                clearMoveCandidates0005
                generateMoveCandidates0000
                sortMoveCandidatesByInfMap0001
                moveTowardsHighestPriorityMoveCandidate0006
      sensor_Lock_Second_Chance (SequenceNode) [&&]
        inverter0027 <- hasRecordedSensorLockTarget0005
        hasSensorLockAbility0001
        hasSensorLockTarget0001
        sortEnemiesBySensorLockQuality0001
        recordHighestPriorityEnemyAsSensorLockTarget0001
        setMood0004
        sensorLockRecordedSensorLockTarget0001
        clearSensorLock0003
      choseToSensorLockDuringMove (SequenceNode) [&&]
        hasSensorLockAbility0002
        hasRecordedSensorLockTarget0006
        setMood0005
        sensorLockRecordedSensorLockTarget0002
        clearSensorLock0004
      fireActiveProbeIfWeHaveTargets (SequenceNode) [&&]
        hasActiveProbeAbility0001
        doesActiveProbeHaveTargets0000
        fireActiveProbe0000
        clearActiveProbeHasTargets0002
      chooseToActiveProbe (SequenceNode) [&&]
        hasActiveProbeAbility0002
        inverter0028 <- doesActiveProbeHaveTargets0001
        cacheHasActiveProbeTargets0000
        doesActiveProbeHaveTargets0002
        fireActiveProbe0001
        clearActiveProbeHasTargets0003
      canAttack (SequenceNode) [&&]
        isBVTrue0015 [Bool_AllowAttack]
        attackAvailable0003 (IsAttackAvailableForUnitNode)
        withLogContext0000 <- selector0019 [||]
          react_to_being_unsteady (SequenceNode) [&&]
            debugLogToContext0000
            isUnsteady0001
            debugLogToContext0001
            expectedDamageToMeLessThan0000
            randomPercentageLessThanBV0004 [Float_UnsteadyCausesBracePercentage]
            debugLogToContext0002
            inverter0029 <- anyHostileBehindMe0002
            debugLogToContext0003
            brace0003
            debugLogToContext0004
          sequence0033 [&&]
            debugLogToContext0005
            sortEnemiesByThreat0001
            debugLogEnemiesByThreat0000
            useNormalToHitThreshold0001
            debugLogToContext0006
            priorityAttack (SelectorNode) [||]
              sequence0034 [&&]
                inverter0030 <- wasTargetedRecently0003
                debugLogToContext0007
                randomPercentageLessThanBV0005 [Float_PriorityAttackPercentage]
                debugLogToContext0008
                sortEnemiesByPriorityList0001
                debugLogToContext0009
                debugLogEnemiesByThreat0001
              maybeFilterOutPriorityTargets0001
              filterKeepingRecentAttackers0001
            debugLogToContext0010
            selector0020 [||]
              sequence0035 [&&]
                hasECMGhostState0006 (HasECMGhostedStateNode)
                selector0021 [||]
                  sequence0036 [&&]
                    hasMinimumStealthPips0003
                    shootAtHighestPriorityEnemy0003
                  sequence0037 [&&]
                    canDoSignificantWhileGhostedDamage0003 (CanDoSignificantDamageWhileGhostedNode)
                    shootAtHighestPriorityEnemy0004
              sequence0038 [&&]
                inverter0031 <- hasECMGhostState0007 (HasECMGhostedStateNode)
                shootAtHighestPriorityEnemy0005
            debugLogToContext0011
  post_attack_move (SequenceNode) [&&]
    movementAvailable0006 (IsMovementAvailableForUnitNode)
    blockUntilPathfindingReady0005
    selector0022 [||]
      post_attack_lance_move (SequenceNode) [&&]
        hasPostAttackLanceMove0000 (LanceHasPostAttackDestinationNode)
        moveLanceToPostAttackDestination0000
      post_attack_unit_move (SequenceNode) [&&]
        hasPostAttackUnitMove0000 (UnitHasPostAttackDestinationNode)
        moveUnitToPostAttackDestination0000
  hunt_previously_seen (SequenceNode) [&&]
    isAlerted0001
    movementAvailable0007 (IsMovementAvailableForUnitNode)
    blockUntilPathfindingReady0006
    findPreviouslySeenEnemies0000
    sortEnemiesByDistanceToLastSeenLocation0000
    priorityHunt (SelectorNode) [||]
      sequence0039 [&&]
        inverter0032 <- wasTargetedRecently0004
        sortEnemiesByPriorityList0002
      filterKeepingRecentAttackers0002
      succeed0001
    moveTowardsHighestPriorityEnemyLastSeenLocation0000
  patrol (SequenceNode) [&&]
    movementAvailable0008 (IsMovementAvailableForUnitNode)
    unitHasRoute0000
    inverter0033 <- lanceHasCompletedRoute0000
    selector0023 [||]
      lanceHasStartedRoute0000
      lanceStartRoute0000
    blockUntilPathfindingReady0007
    moveAlongRoute0000
  brace0004